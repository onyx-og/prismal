"use strict";(self.webpackChunk_prismal_website_react=self.webpackChunk_prismal_website_react||[]).push([[407],{1184:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function c(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}},3071:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"react/functions/useIntersectionObserver","title":"Function: useIntersectionObserver()","description":"useIntersectionObserver(elementRef, refTrigger, observerOptions?): boolean","source":"@site/docs/react/functions/useIntersectionObserver.md","sourceDirName":"react/functions","slug":"/react/functions/useIntersectionObserver","permalink":"/prismal/docs/react/functions/useIntersectionObserver","draft":false,"unlisted":false,"editUrl":"https://github.com/onyx-og/prismal/tree/main/packages/website/docs/react/functions/useIntersectionObserver.md","tags":[],"version":"current","frontMatter":{},"sidebar":"react","previous":{"title":"Function: useElementWidth()","permalink":"/prismal/docs/react/functions/useElementWidth"},"next":{"title":"Function: useModal()","permalink":"/prismal/docs/react/functions/useModal"}}');var t=r(4848),i=r(1184);const c={},o="Function: useIntersectionObserver()",l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"elementRef",id:"elementref",level:3},{value:"refTrigger",id:"reftrigger",level:3},{value:"observerOptions?",id:"observeroptions",level:3},{value:"Returns",id:"returns",level:2},{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"function-useintersectionobserver",children:"Function: useIntersectionObserver()"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"useIntersectionObserver"}),"(",(0,t.jsx)(n.code,{children:"elementRef"}),", ",(0,t.jsx)(n.code,{children:"refTrigger"}),", ",(0,t.jsx)(n.code,{children:"observerOptions?"}),"): ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Defined in: ",(0,t.jsx)(n.a,{href:"https://github.com/onyx-og/prismal/blob/7e948b825c73ffc9bb10fe5a1890783eb7215c77/packages/react/src/hooks/useIntersectionObserver/index.ts#L16",children:"hooks/useIntersectionObserver/index.ts:16"})]}),"\n",(0,t.jsx)(n.p,{children:"useIntersectionObserver"}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"elementref",children:"elementRef"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"RefObject"}),"<",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"HTMLElement"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A ref to the element to observe."}),"\n",(0,t.jsx)(n.h3,{id:"reftrigger",children:"refTrigger"}),"\n",(0,t.jsx)(n.p,{children:"A trigger to re-run the effect when the ref is set."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"string"})," | ",(0,t.jsx)(n.code,{children:"number"})," | ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n",(0,t.jsx)(n.h3,{id:"observeroptions",children:"observerOptions?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"IntersectionObserverInit"})," = ",(0,t.jsx)(n.code,{children:"..."})]}),"\n",(0,t.jsx)(n.p,{children:"Options for the Intersection Observer."}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"True if the element is intersecting, false otherwise."}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"A custom hook that uses the Intersection Observer API to detect when an element is in the viewport."}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const myRef = useRef(null);\nconst [refSet, setRefSet] = useState(false);\nconst isVisible = useIntersectionObserver(myRef, refSet);\n<div ref={(node) => { myRef.current = node; setRefSet(true); }}>...</div>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);